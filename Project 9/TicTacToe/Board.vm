function Board.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push constant 220
pop this 0
push constant 60
pop this 1
push constant 120
pop this 2
push constant 40
pop this 3
push constant 2
pop this 4
push pointer 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Board.drawBoard 0
push argument 0
pop pointer 0
push this 0
push this 3
add
push this 4
sub
push this 1
push this 0
push this 3
add
push this 4
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
push this 0
push constant 2
push this 3
call Math.multiply 2
add
push this 4
sub
push this 1
push this 0
push constant 2
push this 3
call Math.multiply 2
add
push this 4
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
push this 0
push this 1
push this 3
add
push this 4
sub
push this 0
push this 2
add
push this 1
push this 3
add
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push this 0
push this 1
push constant 2
push this 3
call Math.multiply 2
add
push this 4
sub
push this 0
push this 2
add
push this 1
push constant 2
push this 3
call Math.multiply 2
add
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Board.drawNought 4
push argument 0
pop pointer 0
push argument 1
push constant 3
call Math.divide 2
pop local 1
push argument 1
push constant 3
push local 1
call Math.multiply 2
sub
pop local 0
push this 0
push local 0
push this 3
call Math.multiply 2
add
push this 3
push constant 2
call Math.divide 2
add
pop local 2
push this 1
push local 1
push this 3
call Math.multiply 2
add
push this 3
push constant 2
call Math.divide 2
add
pop local 3
push local 2
push local 3
push constant 8
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 2
push local 3
push constant 4
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
return
function Board.drawCross 5
push argument 0
pop pointer 0
push constant 3
pop local 2
push argument 1
push constant 3
call Math.divide 2
pop local 1
push argument 1
push constant 3
push local 1
call Math.multiply 2
sub
pop local 0
push this 0
push local 0
push this 3
call Math.multiply 2
add
push this 3
push constant 2
call Math.divide 2
add
pop local 3
push this 1
push local 1
push this 3
call Math.multiply 2
add
push this 3
push constant 2
call Math.divide 2
add
pop local 4
label WHILE_EXP0
push local 2
push constant 0
lt
not
not
if-goto WHILE_END0
push local 3
push constant 8
sub
push local 4
push constant 8
sub
push local 2
add
push local 3
push constant 8
add
push local 2
sub
push local 4
push constant 8
add
call Screen.drawLine 4
pop temp 0
push local 3
push constant 8
sub
push local 2
add
push local 4
push constant 8
sub
push local 3
push constant 8
add
push local 4
push constant 8
add
push local 2
sub
call Screen.drawLine 4
pop temp 0
push local 3
push constant 8
add
push local 2
sub
push local 4
push constant 8
sub
push local 3
push constant 8
sub
push local 4
push constant 8
add
push local 2
sub
call Screen.drawLine 4
pop temp 0
push local 3
push constant 8
add
push local 4
push constant 8
sub
push local 2
add
push local 3
push constant 8
sub
push local 2
add
push local 4
push constant 8
add
call Screen.drawLine 4
pop temp 0
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.drawRowWin 1
push argument 0
pop pointer 0
push this 1
push argument 1
push this 3
call Math.multiply 2
add
push this 3
push constant 2
call Math.divide 2
add
pop local 0
push this 0
push local 0
push this 4
sub
push this 0
push this 2
add
push local 0
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Board.drawColWin 1
push argument 0
pop pointer 0
push this 0
push argument 1
push this 3
call Math.multiply 2
add
push this 3
push constant 2
call Math.divide 2
add
pop local 0
push local 0
push this 4
sub
push this 1
push local 0
push this 4
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Board.drawMainDiagWin 1
push argument 0
pop pointer 0
push constant 3
pop local 0
label WHILE_EXP0
push local 0
push constant 0
lt
not
not
if-goto WHILE_END0
push this 0
push local 0
add
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
push local 0
sub
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push local 0
add
push this 0
push this 2
add
push local 0
sub
push this 1
push this 2
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.drawMinorDiagWin 1
push argument 0
pop pointer 0
push constant 3
pop local 0
label WHILE_EXP0
push local 0
push constant 0
lt
not
not
if-goto WHILE_END0
push this 0
push this 2
add
push local 0
sub
push this 1
push this 0
push this 1
push this 2
add
push local 0
sub
call Screen.drawLine 4
pop temp 0
push this 0
push this 2
add
push this 1
push local 0
add
push this 0
push local 0
add
push this 1
push this 2
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.drawWin 0
push argument 0
pop pointer 0
push argument 1
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 2
call Board.drawRowWin 2
pop temp 0
label IF_FALSE0
push argument 1
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push argument 2
call Board.drawColWin 2
pop temp 0
label IF_FALSE1
push argument 1
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
call Board.drawMainDiagWin 1
pop temp 0
label IF_FALSE2
push argument 1
push constant 4
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
call Board.drawMinorDiagWin 1
pop temp 0
label IF_FALSE3
push constant 0
return

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ---------- First Mux ---------- //
    // load the instruction depending on if it is a C-type instruction

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Mux1out);


    // ---------- ARegister ---------- //
    // load new input to ARegister if it's an A-instruction or dest includes A
    // output writeM which is a 15-bit (excluding the 16th bit

    Not(in=instruction[15], out=notinstr15);       
    Or(a=notinstr15, b=instruction[5], out=ARegload);
    ARegister(in=Mux1out, load=ARegload, out=ARegout, out[0..14]=addressM);


    // ---------- Second Mux ---------- //
    // whether to load A or M depend on the 12th bit of instruction

    Mux16(a=ARegout, b=inM, sel=instruction[12], out=Mux2out);


    // ---------- DRegister ---------- //   
    // load new input to DRegister if it's a C-instruction and dest includes D
    
    And(a=instruction[15], b=instruction[4], out=DRegload);
    DRegister(in=ALUout, load=DRegload, out=DRegout);


    // ---------- ALU ---------- // 
    // computation through ALU based on the instruction from D and A/M
    // output outM

    ALU(x=DRegout, y=Mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,  out=ALUout, zr=zr, ng=ng);


    // ---------- PC ---------- // 
    // load is determined by the jump conditions
    // always increase by 1 if jump condition not met
    // output pc

    And(a=instruction[15], b=instruction[2], out=j1out);
    And(a=j1out, b=ng, out=PCload1);       // condition for jump less than 0
    And(a=instruction[15], b=instruction[1], out=j2out);
    And(a=j2out, b=zr, out=PCload2);       // condition for jump equal 0
    And(a=instruction[15], b=instruction[0], out=j3out1);
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=j3out1, b=notng, out=j3out2);
    And(a=j3out2, b=notzr, out=PCload3);
    Or(a=PCload1, b=PCload2, out=PCload12);
    Or(a=PCload12, b=PCload3, out=PCload);       // condition for jump bigger than 0
    PC(in=ARegout, load=PCload, inc=true, reset=reset, out[0..14]=pc);


    // ---------- writeM ---------- // 
    // write to memory if it is a C-instruction and dest includes M

    And(a=instruction[15], b=instruction[3], out=writeM);
}